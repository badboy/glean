// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// Check for compatibility between `uniffi` and `uniffi_bindgen` versions.
// Note that we have an error message on the same line as the assertion.
// This is important, because if the assertion fails, the compiler only
// seems to show that single line as context for the user.
uniffi::assert_compatible_version!("0.12.0"); // Please check that you depend on version 0.12.0 of the `uniffi` crate.

// Everybody gets basic buffer support, since it's needed for passing complex types over the FFI.

/// This helper allocates a new byte buffer owned by the Rust code, and returns it
/// to the foreign-language code as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_glean_487e_rustbuffer_alloc(
    size: i32,
    err: &mut uniffi::deps::ffi_support::ExternError,
) -> uniffi::RustBuffer {
    uniffi::deps::ffi_support::call_with_output(err, || {
        uniffi::RustBuffer::new_with_size(size.max(0) as usize)
    })
}

/// This helper copies bytes owned by the foreign-language code into a new byte buffer owned
/// by the Rust code, and returns it as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
///
/// # Safety
/// This function will dereference a provided pointer in order to copy bytes from it, so
/// make sure the `ForeignBytes` struct contains a valid pointer and length.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_glean_487e_rustbuffer_from_bytes(
    bytes: uniffi::ForeignBytes,
    err: &mut uniffi::deps::ffi_support::ExternError,
) -> uniffi::RustBuffer {
    uniffi::deps::ffi_support::call_with_output(err, || {
        let bytes = bytes.as_slice();
        uniffi::RustBuffer::from_vec(bytes.to_vec())
    })
}

/// Free a byte buffer that had previously been passed to the foreign language code.
///
/// # Safety
/// The argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_glean_487e_rustbuffer_free(
    buf: uniffi::RustBuffer,
    err: &mut uniffi::deps::ffi_support::ExternError,
) {
    uniffi::deps::ffi_support::call_with_output(err, || uniffi::RustBuffer::destroy(buf))
}

/// Reserve additional capacity in a byte buffer that had previously been passed to the
/// foreign language code.
///
/// The first argument *must* be a uniquely-owned `RustBuffer` previously
/// obtained from a call into the Rust code that returned a buffer. Its underlying data pointer
/// will be reallocated if necessary and returned in a new `RustBuffer` struct.
///
/// The second argument must be the minimum number of *additional* bytes to reserve
/// capacity for in the buffer; it is likely to reserve additional capacity in practice
/// due to amortized growth strategy of Rust vectors.
///
/// # Safety
/// The first argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_glean_487e_rustbuffer_reserve(
    buf: uniffi::RustBuffer,
    additional: i32,
    err: &mut uniffi::deps::ffi_support::ExternError,
) -> uniffi::RustBuffer {
    uniffi::deps::ffi_support::call_with_output(err, || {
        use std::convert::TryInto;
        let additional: usize = additional
            .try_into()
            .expect("additional buffer length negative or overflowed");
        let mut v = buf.destroy_into_vec();
        v.reserve(additional);
        uniffi::RustBuffer::from_vec(v)
    })
}

/// Free a String that had previously been passed to the foreign language code.
///
/// # Safety
///
/// In order to free the string, Rust takes ownership of a raw pointer which is an
/// unsafe operation. The argument *must* be a uniquely-owned pointer previously
/// obtained from a call into the rust code that returned a string.
/// (In practice that means you got it from the `message` field of an `ExternError`,
/// because that's currently the only place we use `char*` types in our API).
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_glean_487e_string_free(
    cstr: *mut std::os::raw::c_char,
    err: &mut uniffi::deps::ffi_support::ExternError,
) {
    uniffi::deps::ffi_support::call_with_output(err, || {
        uniffi::deps::ffi_support::destroy_c_string(cstr)
    })
}

// We generate error mappings into ffi_support::ExternErrors
// so that the errors can propagate through the FFI

// Enum defitions, corresponding to `enum` in UDL.

#[doc(hidden)]
unsafe impl uniffi::ViaFfi for Lifetime {
    type FfiType = uniffi::RustBuffer;

    fn lower(self) -> Self::FfiType {
        uniffi::lower_into_buffer(self)
    }

    fn try_lift(v: Self::FfiType) -> uniffi::deps::anyhow::Result<Self> {
        uniffi::try_lift_from_buffer(v)
    }

    fn write<B: uniffi::deps::bytes::BufMut>(&self, buf: &mut B) {
        match self {
            Lifetime::Ping {} => {
                buf.put_i32(1);
            }
            Lifetime::Application {} => {
                buf.put_i32(2);
            }
            Lifetime::User {} => {
                buf.put_i32(3);
            }
        };
    }

    fn try_read<B: uniffi::deps::bytes::Buf>(buf: &mut B) -> uniffi::deps::anyhow::Result<Self> {
        uniffi::check_remaining(buf, 4)?;
        Ok(match buf.get_i32() {
            1 => Lifetime::Ping,
            2 => Lifetime::Application,
            3 => Lifetime::User,
            v => uniffi::deps::anyhow::bail!("Invalid Lifetime enum value: {}", v),
        })
    }
}

// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.

#[doc(hidden)]
unsafe impl uniffi::ViaFfi for Configuration {
    type FfiType = uniffi::RustBuffer;

    fn lower(self) -> Self::FfiType {
        uniffi::lower_into_buffer(self)
    }

    fn try_lift(v: Self::FfiType) -> uniffi::deps::anyhow::Result<Self> {
        uniffi::try_lift_from_buffer(v)
    }

    fn write<B: uniffi::deps::bytes::BufMut>(&self, buf: &mut B) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        uniffi::ViaFfi::write(&self.data_dir, buf);
        uniffi::ViaFfi::write(&self.application_id, buf);
        uniffi::ViaFfi::write(&self.language_binding_name, buf);
        uniffi::ViaFfi::write(&self.upload_enabled, buf);
        uniffi::ViaFfi::write(&self.max_events, buf);
        uniffi::ViaFfi::write(&self.delay_ping_lifetime_io, buf);
        uniffi::ViaFfi::write(&self.app_build, buf);
        uniffi::ViaFfi::write(&self.use_core_mps, buf);
    }

    fn try_read<B: uniffi::deps::bytes::Buf>(buf: &mut B) -> uniffi::deps::anyhow::Result<Self> {
        Ok(Self {
            data_dir: <String as uniffi::ViaFfi>::try_read(buf)?,
            application_id: <String as uniffi::ViaFfi>::try_read(buf)?,
            language_binding_name: <String as uniffi::ViaFfi>::try_read(buf)?,
            upload_enabled: <bool as uniffi::ViaFfi>::try_read(buf)?,
            max_events: <Option<u32> as uniffi::ViaFfi>::try_read(buf)?,
            delay_ping_lifetime_io: <bool as uniffi::ViaFfi>::try_read(buf)?,
            app_build: <String as uniffi::ViaFfi>::try_read(buf)?,
            use_core_mps: <bool as uniffi::ViaFfi>::try_read(buf)?,
        })
    }
}

#[doc(hidden)]
unsafe impl uniffi::ViaFfi for CommonMetricData {
    type FfiType = uniffi::RustBuffer;

    fn lower(self) -> Self::FfiType {
        uniffi::lower_into_buffer(self)
    }

    fn try_lift(v: Self::FfiType) -> uniffi::deps::anyhow::Result<Self> {
        uniffi::try_lift_from_buffer(v)
    }

    fn write<B: uniffi::deps::bytes::BufMut>(&self, buf: &mut B) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        uniffi::ViaFfi::write(&self.category, buf);
        uniffi::ViaFfi::write(&self.name, buf);
        uniffi::ViaFfi::write(&self.send_in_pings, buf);
        uniffi::ViaFfi::write(&self.lifetime, buf);
        uniffi::ViaFfi::write(&self.disabled, buf);
        uniffi::ViaFfi::write(&self.dynamic_label, buf);
    }

    fn try_read<B: uniffi::deps::bytes::Buf>(buf: &mut B) -> uniffi::deps::anyhow::Result<Self> {
        Ok(Self {
            category: <String as uniffi::ViaFfi>::try_read(buf)?,
            name: <String as uniffi::ViaFfi>::try_read(buf)?,
            send_in_pings: <Vec<String> as uniffi::ViaFfi>::try_read(buf)?,
            lifetime: <Lifetime as uniffi::ViaFfi>::try_read(buf)?,
            disabled: <bool as uniffi::ViaFfi>::try_read(buf)?,
            dynamic_label: <Option<String> as uniffi::ViaFfi>::try_read(buf)?,
        })
    }
}

// Top level functions, corresponding to UDL `namespace` functions.

#[allow(clippy::all)]
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn glean_487e_initialize(
    cfg: uniffi::RustBuffer,
    err: &mut uniffi::deps::ffi_support::ExternError,
) -> i8 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("glean_487e_initialize");

    uniffi::deps::ffi_support::call_with_output(err, || {
        let _retval = initialize(<Configuration as uniffi::ViaFfi>::try_lift(cfg).unwrap());
        <bool as uniffi::ViaFfi>::lower(_retval)
    })
}

#[allow(clippy::all)]
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn glean_487e_glean_enable_logging(
    err: &mut uniffi::deps::ffi_support::ExternError,
) -> () {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("glean_487e_glean_enable_logging");

    uniffi::deps::ffi_support::call_with_output(err, || {
        let _retval = glean_enable_logging();
        _retval
    })
}
// Object definitions, correspoding to UDL `interface` definitions.

// For each Object definition, we assume the caller has provided an appropriately-shaped `struct T`
// with an `impl` for each method on the object. We create an `Arc<T>` for "safely" handing out
// references to these structs to foreign language code, and we provide a `pub extern "C"` function
// corresponding to each method.
//
// (Note that "safely" is in "scare quotes" - that's because we use functions on an `Arc` that
// that are inherently unsafe, but the code we generate is safe in practice.)
//
// If the caller's implementation of the struct does not match with the methods or types specified
// in the UDL, then the rust compiler will complain with a (hopefully at least somewhat helpful!)
// error message when processing this generated code.

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_glean_487e_CounterMetric_object_free(ptr: *const std::os::raw::c_void) {
    // We mustn't panic across the FFI, but also can't report it anywhere.
    // The best we can do it catch, warn and ignore.
    if let Err(e) = std::panic::catch_unwind(|| {
        assert!(!ptr.is_null());
        drop(unsafe { std::sync::Arc::from_raw(ptr as *const CounterMetric) })
    }) {
        uniffi::deps::log::error!("ffi_glean_487e_CounterMetric_object_free panicked: {:?}", e);
    }
}
#[allow(clippy::all)]
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn glean_487e_CounterMetric_new(
    meta: uniffi::RustBuffer,
    err: &mut uniffi::deps::ffi_support::ExternError,
) -> *const std::os::raw::c_void /* *const CounterMetric */ {
    uniffi::deps::log::debug!("glean_487e_CounterMetric_new");

    // If the constructor does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::deps::ffi_support::call_with_output(err, || {
        let _new =
            CounterMetric::new(<CommonMetricData as uniffi::ViaFfi>::try_lift(meta).unwrap());
        let _arc = std::sync::Arc::new(_new);
        <std::sync::Arc<CounterMetric> as uniffi::ViaFfi>::lower(_arc)
    })
}
#[allow(clippy::all)]
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn glean_487e_CounterMetric_add(
    ptr: *const std::os::raw::c_void,
    amount: i32,
    err: &mut uniffi::deps::ffi_support::ExternError,
) -> () {
    uniffi::deps::log::debug!("glean_487e_CounterMetric_add");
    // If the method does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::deps::ffi_support::call_with_output(err, || {
        let _retval = CounterMetric::add(
            &<std::sync::Arc<CounterMetric> as uniffi::ViaFfi>::try_lift(ptr).unwrap(),
            <i32 as uniffi::ViaFfi>::try_lift(amount).unwrap(),
        );
        _retval
    })
}

// Callback Interface defitions, corresponding to UDL `callback interface` definitions.
