namespace glean {
    boolean initialize(Configuration cfg);
    boolean finish_initialize();

    void enable_logging();

    void set_upload_enabled(boolean enabled);
};

dictionary Configuration {
    string data_dir;
    string application_id;
    string language_binding_name;
    boolean upload_enabled;
    u32? max_events;
    boolean delay_ping_lifetime_io;
    string app_build;
    boolean use_core_mps;
};

enum Lifetime {
    "Ping",
    "Application",
    "User",
};

dictionary CommonMetricData {
    string category;
    string name;

    sequence<string> send_in_pings;
    Lifetime lifetime;

    boolean disabled;
    string? dynamic_label = null;
};

dictionary RecordedEventData {
    string category;
    string name;
    u64 timestamp;

    string? extra = null;
};

interface CounterMetric {
    constructor(CommonMetricData meta);

    void add(optional u32 amount = 1);

    i32? test_get_value(optional string? ping_name = null);
};

interface EventMetric {
    constructor(CommonMetricData meta, sequence<string> allowed_extra_keys);

    void _internal_record(optional string? extra = null);

    RecordedEventData? test_get_value(optional string? ping_name = null);
};
